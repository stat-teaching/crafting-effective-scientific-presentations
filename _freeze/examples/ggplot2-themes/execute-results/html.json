{
  "hash": "e7b5d7d27022598080b5a89b947a0743",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"`ggplot2` themes\"\n---\n\n\n\n\n\nThis a quick example to show you how to globally define a theme that can be reused writing less code and improving the consistency in the documents, slides, papers, etc.\n\nWhen you create a `ggplot2` object, the default theme is the `theme_gray()`:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(iris, aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n    geom_point(size = 3) +\n    theme_gray()\n```\n\n::: {.cell-output-display}\n![](ggplot2-themes_files/figure-html/unnamed-chunk-2-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n\nBy default, all the theming features can be included with `theme()`:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n    geom_point(size = 3) +\n    theme(axis.title.x = element_text(size = 20, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](ggplot2-themes_files/figure-html/unnamed-chunk-3-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n\nYou can avoid copy-and-paste of theming features by creating a new theme function and use the function directly. For example, assume you want:\n\n- bold and larger axis title\n- title in the middle of the plot (not left-aligned as default)\n- legend always below the plot\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_theme <- function(){ # no argument\n    theme(\n        axis.title = element_text(face = \"bold\", size = 20),\n        legend.position = \"bottom\",\n        plot.title = element_text(hjust = 0.5)\n    )\n}\n\nggplot(iris, aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n    geom_point(size = 3) +\n    ggtitle(\"my amazing plot\") +\n    my_theme()\n```\n\n::: {.cell-output-display}\n![](ggplot2-themes_files/figure-html/unnamed-chunk-4-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n\nYou can easily add other elements to `my_theme()` and also save the function and import it with `source()` in other scripts.\n\nAn even more general approach is changing, within a script or document, the default theme thus all the next plots will have your custom theme by default.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_set(my_theme())\n\n# note that I removed my_theme()\nggplot(iris, aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n    geom_point(size = 3) +\n    ggtitle(\"my amazing plot\")\n```\n\n::: {.cell-output-display}\n![](ggplot2-themes_files/figure-html/unnamed-chunk-5-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n\nFinally, you can set the font size consistently with a combination of setting the base size of a plot and adjusting the relative size with `rel()`. For example, I set the base size to `24pt` and I made the legend text a little bit smaller and the title a little bit bigger.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_theme <- function(){ # no argument\n    theme_minimal() +\n        theme(\n        text = element_text(size = 24), # this is the general text\n        axis.title = element_text(face = \"bold\"),\n        legend.position = \"bottom\",\n        plot.title = element_text(hjust = 0.5, size = rel(1.2)),\n        legend.text = element_text(size = rel(0.8))\n    )\n}\n\nggplot(iris, aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n    geom_point(size = 3) +\n    ggtitle(\"my amazing plot\") +\n    my_theme()\n```\n\n::: {.cell-output-display}\n![](ggplot2-themes_files/figure-html/unnamed-chunk-6-1.svg){fig-align='center' width=672}\n:::\n:::",
    "supporting": [
      "ggplot2-themes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}