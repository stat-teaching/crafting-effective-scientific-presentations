[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "examples/slides-html.html#quarto",
    "href": "examples/slides-html.html#quarto",
    "title": "Quarto Presentation",
    "section": "Quarto",
    "text": "Quarto\nQuarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see https://quarto.org/docs/presentations/."
  },
  {
    "objectID": "examples/slides-html.html#bullets",
    "href": "examples/slides-html.html#bullets",
    "title": "Quarto Presentation",
    "section": "Bullets",
    "text": "Bullets\nWhen you click the Render button a document will be generated that includes:\n\nContent authored with markdown\nOutput from executable code"
  },
  {
    "objectID": "examples/slides-html.html#code",
    "href": "examples/slides-html.html#code",
    "title": "Quarto Presentation",
    "section": "Code",
    "text": "Code\nWhen you click the Render button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Crafting Effective Scientific Presentations (CESP)",
    "section": "",
    "text": "Link to the Moodle page. However, all the relevant materials are always linked in this website."
  },
  {
    "objectID": "index.html#slides",
    "href": "index.html#slides",
    "title": "Crafting Effective Scientific Presentations (CESP)",
    "section": "Slides",
    "text": "Slides\n\nCrafting Effective Scientific Presentations"
  },
  {
    "objectID": "index.html#examples",
    "href": "index.html#examples",
    "title": "Crafting Effective Scientific Presentations (CESP)",
    "section": "Examples",
    "text": "Examples\n\nggplot2 theming features"
  },
  {
    "objectID": "examples/ggplot2-themes.html",
    "href": "examples/ggplot2-themes.html",
    "title": "ggplot2 themes",
    "section": "",
    "text": "This a quick example to show you how to globally define a theme that can be reused writing less code and improving the consistency in the documents, slides, papers, etc.\nWhen you create a ggplot2 object, the default theme is the theme_gray():\n\nlibrary(ggplot2)\n\nggplot(iris, aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n    geom_point(size = 3) +\n    theme_gray()\n\n\n\n\n\n\n\n\nBy default, all the theming features can be included with theme():\n\nggplot(iris, aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n    geom_point(size = 3) +\n    theme(axis.title.x = element_text(size = 20, face = \"bold\"))\n\n\n\n\n\n\n\n\nYou can avoid copy-and-paste of theming features by creating a new theme function and use the function directly. For example, assume you want:\n\nbold and larger axis title\ntitle in the middle of the plot (not left-aligned as default)\nlegend always below the plot\n\n\nmy_theme &lt;- function(){ # no argument\n    theme(\n        axis.title = element_text(face = \"bold\", size = 20),\n        legend.position = \"bottom\",\n        plot.title = element_text(hjust = 0.5)\n    )\n}\n\nggplot(iris, aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n    geom_point(size = 3) +\n    ggtitle(\"my amazing plot\") +\n    my_theme()\n\n\n\n\n\n\n\n\nYou can easily add other elements to my_theme() and also save the function and import it with source() in other scripts.\nAn even more general approach is changing, within a script or document, the default theme thus all the next plots will have your custom theme by default.\n\ntheme_set(my_theme())\n\n# note that I removed my_theme()\nggplot(iris, aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n    geom_point(size = 3) +\n    ggtitle(\"my amazing plot\")\n\n\n\n\n\n\n\n\nFinally, you can set the font size consistently with a combination of setting the base size of a plot and adjusting the relative size with rel(). For example, I set the base size to 24pt and I made the legend text a little bit smaller and the title a little bit bigger.\n\nmy_theme &lt;- function(){ # no argument\n    theme_minimal() +\n        theme(\n        text = element_text(size = 24), # this is the general text\n        axis.title = element_text(face = \"bold\"),\n        legend.position = \"bottom\",\n        plot.title = element_text(hjust = 0.5, size = rel(1.2)),\n        legend.text = element_text(size = rel(0.8))\n    )\n}\n\nggplot(iris, aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n    geom_point(size = 3) +\n    ggtitle(\"my amazing plot\") +\n    my_theme()"
  }
]